<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Data Structures CSE01</string>
    <string name="action_settings">Settings</string>
    <string name="Introduction">Introduction</string>
	<string name="ContentIntroduction">
	    To understand how various data structures work. 
	    To understand some important applictions of various 
	    data structures. To familiarize how certain 
	    applications can benefit from the choice of data 
	    structures. To understand how the choice of data 
	    structures can lead to efficient implementations of 
	    algorithms. 
	</string>
	<string name="TargetAudience">Target Audience</string>
	<string name="ContentTargetAudience">The experiments are
	     targeted at students who have just finished a first
	      course in programming. Knowledge of writing programs
	       in any programming language is expected. No prior
	        experience with data structuers is required. 
	</string>
	<string name="CoursesAligned">Courses Aligned</string>
	<string name="ContentCoursesAligned">The present lab is 
	    aligned with courses such as Introduction to Data 
	    Structures, Data Structures in C/C++, and the like. 
	    The experiments touch on most topics covered in such
	     courses in most curricula.  
	</string>
	<string name="Prerequisite">Prerequisite</string>
	<string name="ContentPrerequisite">Only prior programming 
	    experience is required. It is expected that before 
	    using these experiments, one can write simple 
	    programs. 
    </string>
    <string name="ContentIntroduction2">\n Introduction
        \n \nThis experiment guides you using stacks in a practical 
        example. Stacks are an important data structure and 
        finds applications where essentially the data item 
        that is stored latest is what needs to be accessed first. 
         \n \nExamples of applications of stakcs in natural settings include 
         a stack of books on a table. Typically, as you pile 
         books on a desk, the book that you can access 
         instantly is the one that you placed at the latest 
         time. 
         \n \nA good computing application of stacks is to 
         use it to evaluating arithmetical expressions. In 
         this experiment, we will go through the entire 
         expression evaluation process. The attached notes 
         and the slides describe the technical details. The
          animation can help you understand the process via 
          several examples. Use these resources to develop 
          code for your own expression evaluator. To add a 
          good interface, you can consider a small web 
          interface where in one can type an expression and 
          ask for it to be evaluated. Think of Google which 
          can do this for most expressions. 
    </string>
    <string name="ExpressionStack">Expression Evaluation using Stacks
    </string>
    <string name="TheoryExperiment2">\nTheory 
        \n \n1.1 The Stack Data Structure
        \n \nThe stack data structure is characterized by its 
        last-in-first-out access mechanism. Thus, the 
        element that is added most recently will be the 
        element that is removed first on a remove call. 
        Such an order of addition and deletion of items 
        occurs in several natural settings. Consider for 
        example, a stack of plates in a cafeteria. The first
         plate that is taken out is the plate that is on the 
         top of the pile. This plate would be the one that is
          added to the pile most recently.
        \n \nAnother example could be as follows. We are all 
        used to text editors that allow for undo and redo 
        operations. In such an editor, suppose S is the 
        present text and a word w1 is deleted to get S\'. 
        Then a word w2 is deleted. Now, the user wishes to 
        undo some of the changes. To get the correct result, 
        it is possible only if all the operations done after 
        w1 is deleted are also undone. Moreover, these 
        operations must be performed in their reverse order. 
        Thus, we need a mechanism to associate a stored set of 
        items. Irrespective of the implemenation mechanism, 
        the stack data structure has the following basic 
        operations.Let S be a stack. 
        \n\ncreate : Create an empty stack
        \n\npush(element) : Pushes the element item to the top of the stack
        \n\npop() : Returns the item that is most recently pushed and deletes it.
        \n\nsize() : Returns the size of the stack.
        \n\n1.2 Applications of Stacks
        \n\n1.2.1 Expression Evaluation
        \nOne of the prominent applications of stacks is 
        expression evaluation. Consider a table calculator 
        which evaluates arithemetic expressions involving 
        addition, multiplication, subtraction, and division. 
        For example, 2+3 * 5 - 7 is a valid expression. 
        The result of the above expression is 10 as 
        multiplication has precedence over addition and 
        subtraction. To disambiguate, one also uses 
        parantheses and write the same expression as 
        2+ (3*5) - 7. However, it would be quite cumbersome 
        to use parantheses when especially, the precedence 
        is known. 
        \n\nHence, one needs to first convert a given 
        expression into an non-ambiguous model so that 
        evaluation can be done easily. There are three ways 
        to write an expression. The above way of writing 
        expressions is called the infix notation because 
        the operators are placed in between the two 
        operands. There are other ways of writing an 
        expression. 
        \n\nIn the prefix notation, operators 
        preceede the operands. So the above expression would 
        be written as -+*3 5 2 7. 
        \n\nIn the postfix notation, the operators are 
        written after the operands. The postfix equivalent 
        way of writing the above expression would be 
        3 5* 2 + 7 -. It turns out that the postfix and 
        prefix notations are free of ambiguity. We will see  
        how to convert a given expression in infix form to its 
        postfix form first and then see how to 
        convert a given expression in the infix form to its 
        prefix form.
        \n\n1.2.2 Evaluating a Postfix Expression
        \n\nConsider an expression given in the postifix 
        notation. We now see how to evaluate such an 
        expression. For example, ab * c + is a postifix 
        expression. Since the operators follow the operands, 
        it is intuitive to see if the previously available 
        two operands are the corresponding operands for a 
        given operator. This intuition serves well and is 
        correct. So, when processing a postfix expression 
        from left to right, when we encounter an operator, 
        we have to apply the operation to the two most 
        recent operands. This suggests that the operands 
        should be placed on a stack.
        \n \n2.1 The Queue Data Structure
        \n\nIn the previous section, we have seen a new way of
         access model to the array can result in good 
         solutions to important applications. A queue is 
         another such data strucure which supports operations 
         such as insert and delete. One can think of analogies
         to several situations such as a queue at a ticket 
         reservation office, an operating system job queue, or
          a queue of aeroplanes ready to take off. In all such
           settings, the element or the object that is first 
           inserted is the first one to come out of the queue 
           also. 
           \n\nThus, the queue is a First-In- First-Out 
           (FIFO) data structure. This suggests that there 
           are two quantities associated with a queue, the 
           front and the rear. The rear indicates the 
           position where the new elements would be added. 
           The front indicates the position from where 
           elements can be deleted from the queue. Formally,
            a queue is a data structure which supports the 
            following operations.
        \n\ninsert : Insert an element to the rear of the queue.
        \n\ndelete : Delete an element from the front of the queue.
        \n\nsize : Returns the size of the queue. 
    </string>
    <string name="ObjectiveExperiment2">\nObjective
        \n\nAt the end of this experiment, you will be 
        able to:
        \n\n * Use stacks to evaluate expressions
        \n\n * Know applications of stacks
        \n\n * Set up a web based calculator
    </string>
    
        <string name="Nine">9</string>
        <string name="Eight">8</string>
        <string name="Seven">7</string>
        <string name="Six">6</string>
        <string name="Five">5</string>
        <string name="Four">4</string>
        <string name="Three">3</string>
        <string name="Two">2</string>
        <string name="One">1</string>
        <string name="Zero">0</string>
        <string name="dot">.</string>
        <string name="C">C</string>
        <string name="openBracket">(</string>
        <string name="closeBracket">)</string>
        <string name="Backspace">Backspace</string>
        <string name="Plus">+</string>
        <string name="Divide">/</string>
        <string name="Multiply">*</string>
        <string name="Subtract">-</string>
        <string name="Exponent">^</string>
        <string name="EqualTo">=</string>
        <string name="Percentage">%</string>
        <string name="OneDivideX">1/x</string>
        <string name="PlusOrMinus">+/-</string>
        <string name="StartMsgCalculator">Press C to start</string>
        <string name="QuizzesExperiment2">\nQuizzes
        \n\nHere are some questions that help you understand
         the stack data structure better.
        \n\n(a)Can we also evaluate an infix expression by 
        first converting it into a prefix expression, and
         then evaluating the prefix expression? Where are
          the operands for an operator in a prefix 
          expression?
        \n\nIn our example so far, we have implemented the
         stack as an array by restricting the access model
          to only one index. We will now study other possible
           implementations of a stack data structure.
        \n\n(b)Study the queue data structure in the notes 
        provided. Design an implementation scheme for a 
        stack using only queue operations.
        \n\n(c)Use a linked list to implement a stack. 
        What are the advantages and disadvantages of this 
        model. 
        \n\n(d)Another line of thought is to see how the stack 
        data structure can be useful with small 
        modifications. A peekStack is a data structure that 
        allows one to peek at any element, but pop only the 
        top element. Are there any applications of this 
        facility?
        \n\n(e)Think of your own modification to the stack 
        along with a motivating application(s). Eg. Stack 
        supporting a return minimum operation in O(1) time.    
        </string>
</resources>
